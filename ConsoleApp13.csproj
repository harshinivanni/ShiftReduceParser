using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace Vannikkarasan_SRP
{
    public class Lexer
    {
        string input;
        int y,z;
        List<String> list_Parse = new List<String>();

        string inputString;        
        public List<String> buffer = new List<String>();
        Stack newst = new Stack();
        List<String> l = new List<String>();
        public void errorIdent()
        {
            Console.WriteLine("Invalid Identifier");
            return;

        }
        public void PrintValues(IEnumerable myCollection)
        {
            foreach (Object s in myCollection)
                newst.Push(s);
            while (newst.Count > 0)
            {
                Console.Write(newst.Peek());
                newst.Pop();
            }
            Console.WriteLine();
        }
        public void lex()
        {
            string[,] shiftReduce_tbl = new string[13, 6]
            {
            {"id","+","*","(",")","$"},
            {"S5"," "," ","S4"," "," "},
            {" ","S6"," "," "," ","ACCEPT"},
            {" ","R2","S7"," ","R2","R2"},
            {" ","R4","R4"," ","R4","R4"},
            {"S5"," "," ","S4"," "," "},
            {" ","R6","R6"," ","R6","R6"},
            {"S5"," "," ","S4"," "," "},
            {"S5"," "," ","S4"," "," "},
            {" ","S6"," "," ","S11"," "},
            {" ","R1","S7"," ","R1","R1"},
            {" ","R3","R3"," ","R3","R3"},
            {" ","R5","R5"," ","R5","R5"}
            };

            int[,] GoTo = new int[12, 3]
                           {
                           {1,2,3},
                           {0,0,0},
                           {0,0,0},
                           {0,0,0},
                           {8,2,3},
                           {0,0,0},
                           {0,9,3},
                           {0,0,10},
                           {0,0,0},
                           {0,0,0},
                           {0,0,0},
                           {0,0,0}
                           };
            Stack st = new Stack();

                st.Push("0");
            Console.WriteLine("-----------------------");
            Console.WriteLine("Stack");
            Console.WriteLine("-----------------------");
            for (int x = 0; x < l.Count; x++)
            {
                for (y=0; y < 6; y++)
                {
                    if (l[x].Equals(shiftReduce_tbl[0, y]))
                        break;
                }                
                PrintValues(st); // prints the values stored in the stack entirely
                list_Parse.Add(shiftReduce_tbl[Convert.ToInt32(st.Peek().ToString()) + 1, y]);
                if ((shiftReduce_tbl[Convert.ToInt32(st.Peek().ToString()) + 1, y].Substring(0, 1) == "R"))// Checks whether it is reduce
                {
                    string search = shiftReduce_tbl[Convert.ToInt32(st.Peek().ToString()) + 1, y].Substring(1, 1); //Takes the integer value from the values of the action table

                    if (search == "6")
                    {
                        st.Pop();
                        st.Pop();
                        z = Convert.ToInt32(st.Peek());
                        st.Push("F");
                        st.Push(GoTo[z, 2]);

                    }
                    else if (search == "2")
                    {
                        st.Pop();
                        st.Pop();
                        z = Convert.ToInt32(st.Peek());

                        st.Push("E");
                        st.Push(GoTo[z, 0]);


                    }
                    else if (search == "4")
                    {
                        st.Pop();
                        st.Pop();
                        z = Convert.ToInt32(st.Peek());

                        st.Push("T");
                        st.Push(GoTo[z, 1]);

                    }
                    else if (search == "1" || search == "3")
                    {
                        st.Pop();
                        st.Pop();
                        st.Pop();
                        st.Pop();

                    }
                    else if (search == "5")
                    {
                        st.Pop();
                        st.Pop();
                        st.Pop();
                        st.Pop();
                        st.Pop();
                        st.Pop();

                        z = Convert.ToInt32(st.Peek());

                        st.Push("F");
                        st.Push(GoTo[z, 2]);

                    }

                    x--;

                }
                else if (shiftReduce_tbl[Convert.ToInt32(st.Peek().ToString()) + 1, y].Substring(0, 1) == "S")//checks if it is shift
                {
                    string s;
                    // if there are two integers in the given digit, it takes both the digits in the if
                    if (shiftReduce_tbl[Convert.ToInt32(st.Peek().ToString()) + 1, y].Length == 3)
                    {
                         s = shiftReduce_tbl[Convert.ToInt32(st.Peek().ToString()) + 1, y].Substring(1, 2);
                    }
                    else
                    {
                         s = shiftReduce_tbl[Convert.ToInt32(st.Peek().ToString()) + 1, y].Substring(1, 1);
                    }

                    st.Push(l[x].ToString());
                    st.Push(s.ToString());


                }
                else if (shiftReduce_tbl[Convert.ToInt32(st.Peek().ToString()) + 1, y].Substring(0, 1) == "A")  // checks if it is accept
                {
                    l.Clear();
                }

                else
                {
                    Console.WriteLine("Error");  // Throws error if not any of the above
                    l.Clear();

                }
            }
        }
        public void Parsing()
        {
            Console.WriteLine("------------------");
            Console.WriteLine("Parsing Steps");
            Console.WriteLine("------------------");
            foreach (string s in list_Parse)
             Console.WriteLine(s);

        }
        public void Input()
        {
            input = Console.ReadLine();
            string input1 = input.Trim();
            inputString = input1.Replace(" ", "");
            var invalidexp = Regex.Matches(inputString, @"[^a-zA-Z0-9\+\*\(\)]")
                    .Cast<Match>()
                    .Select(m => m.Value)
                    .ToArray();
            if (invalidexp.Length > 0)
            {
                errorIdent();
                return;
            }

            var matches = Regex.Matches(inputString, @"[a-zA-Z0-9]+|[\-\+\*\/\(\)]").Cast<Match>()
    .Select(m => m.Value)
    .ToArray();
            Console.WriteLine("-----------------------------");
            Console.WriteLine("Calling Lexer:");
            Console.WriteLine("-----------------------------");
            foreach (string m in matches)
            {
                if (char.IsLetter(m[0]) || char.IsDigit(m[0]))
                {
                    l.Add("id");
                    Console.WriteLine(m + ":id");
                }

                else if ((m[0]) == '(')
                {
                    l.Add("(");
                    Console.WriteLine(m + ":(");

                }
                else if ((m[0]) == ')')
                {
                    l.Add(")");
                    Console.WriteLine(m + ":)");

                }
                else if ((m[0]) == '/')
                {
                    l.Add("/");
                    Console.WriteLine(m + ":/");

                }
                else if ((m[0]) == '*')
                {
                    l.Add("*");
                    Console.WriteLine(m + ":*");

                }
                else if ((m[0]) == '+')
                {
                    l.Add("+");
                    Console.WriteLine(m + ":+");

                }
                else if ((m[0]) == '-')
                {
                    l.Add("-");
                    Console.WriteLine(m + ":-");

                }
                buffer.Add(m);


            }
            l.Add("$");          
            lex();
        }
    }

     
    public class Program
    {
        public static void Main(string[] args)
        {
            Console.WriteLine("Enter your expression:");
            Lexer l = new Lexer();
            l.Input();
            l.Parsing();
            Console.ReadLine();

        }
    }
}
